/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InterfazPrincipal.java
 *
 * Created on 24/03/2011, 01:52:15 PM
 */

package interfaz;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import qqa.Main;
import qqa.Nucleo;

/**
 *
 * @author Jose
 */
public class InterfazPrincipal extends javax.swing.JFrame implements KeyListener{

    /** Creates new form InterfazPrincipal */
    public InterfazPrincipal() {
        addKeyListener(this);
        initComponents();
        setBounds(0, 0, 656, 518);
        setLocationRelativeTo(null);
        new HiloFocus().start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = Main.miCanvas;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        getContentPane().add(canvas1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent e) {
        Main.miCanvas.keyTyped(e);
    }

    public void keyPressed(KeyEvent e) {
        Main.miCanvas.keyPressed(e);
    }

    public void keyReleased(KeyEvent e) {
        Main.miCanvas.keyReleased(e);
    }

    public void ajustarFoco(){
        setFocusable(true);
        requestFocusInWindow();
    }

    public class HiloFocus extends Thread {

        public void run() {
            while (true) {
                try {
                    sleep(500);
                } catch (InterruptedException ex) {
                }
                synchronized (this) {
                    ajustarFoco();
                }
            }
        }
    }
}